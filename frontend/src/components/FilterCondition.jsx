import React from 'react';

const FilterCondition = ({ filter, availableFilters, onChange, onRemove, index }) => {
  console.log('üîç FilterCondition render:', { filter, availableFilters });

  const handleFieldChange = (field) => {
    console.log('üîÑ Field change:', field);
    const selectedFilter = availableFilters.find(f => f.field === field);
    
    const newFilter = {
      ...filter,
      field: field,
      operator: 'equals', // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
      value: '' // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    };
    
    console.log('‚úÖ New filter after field change:', newFilter);
    onChange(newFilter);
  };

  const handleOperatorChange = (operator) => {
    console.log('üîÑ Operator change:', operator);
    const newFilter = {
      ...filter,
      operator: operator,
      value: '' // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    };
    console.log('‚úÖ New filter after operator change:', newFilter);
    onChange(newFilter);
  };

  const handleValueChange = (value) => {
    console.log('üîÑ Value change:', value);
    const newFilter = {
      ...filter,
      value: value
    };
    onChange(newFilter);
  };

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
  const selectedFilterConfig = availableFilters.find(f => f.field === filter.field);

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
  const availableOperators = selectedFilterConfig?.operators || ['equals', 'not_equals'];

  // –†–µ–Ω–¥–µ—Ä –ø–æ–ª—è –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è
  const renderValueInput = () => {
    if (!filter.field) {
      return (
        <div style={{ padding: '10px', textAlign: 'center', color: '#999', fontStyle: 'italic' }}>
          ‚Üê –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ —Å–ª–µ–≤–∞
        </div>
      );
    }

    const operator = filter.operator || 'equals';

    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ in/not_in
    if (operator === 'in' || operator === 'not_in') {
      if (selectedFilterConfig?.values) {
        return (
          <div>
            <div style={{ fontSize: '12px', marginBottom: '5px', color: '#666' }}>
              –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ:
            </div>
            <select
              multiple
              value={filter.value ? filter.value.split(',') : []}
              onChange={(e) => {
                const values = Array.from(e.target.selectedOptions).map(option => option.value);
                handleValueChange(values.join(','));
              }}
              style={{ 
                width: '100%',
                padding: '8px',
                border: '2px solid #e1e1e1',
                borderRadius: '4px',
                minHeight: '100px'
              }}
              size={Math.min(selectedFilterConfig.values.length, 6)}
            >
              {selectedFilterConfig.values.map(value => (
                <option key={value} value={value}>
                  {value}
                </option>
              ))}
            </select>
            {filter.value && (
              <div style={{ fontSize: '12px', marginTop: '5px', color: '#666' }}>
                –í—ã–±—Ä–∞–Ω–æ: {filter.value.split(',').length}
              </div>
            )}
          </div>
        );
      }
    }

    // –û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if (selectedFilterConfig?.values && !['contains', 'starts_with', 'ends_with'].includes(operator)) {
      return (
        <select
          value={filter.value}
          onChange={(e) => handleValueChange(e.target.value)}
          style={{ 
            width: '100%',
            padding: '10px',
            border: '2px solid #e1e1e1',
            borderRadius: '4px',
            fontSize: '14px'
          }}
        >
          <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ --</option>
          {selectedFilterConfig.values.map(value => (
            <option key={value} value={value}>
              {value}
            </option>
          ))}
        </select>
      );
    }

    // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
    if (['contains', 'starts_with', 'ends_with'].includes(operator)) {
      return (
        <input
          type="text"
          value={filter.value}
          onChange={(e) => handleValueChange(e.target.value)}
          placeholder={`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞...`}
          style={{ 
            width: '100%',
            padding: '10px',
            border: '2px solid #e1e1e1',
            borderRadius: '4px',
            fontSize: '14px'
          }}
        />
      );
    }

    // –ß–∏—Å–ª–æ–≤–æ–µ –ø–æ–ª–µ
    if (selectedFilterConfig?.type === 'number') {
      return (
        <input
          type="number"
          value={filter.value}
          onChange={(e) => handleValueChange(e.target.value)}
          placeholder="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ..."
          style={{ 
            width: '100%',
            padding: '10px',
            border: '2px solid #e1e1e1',
            borderRadius: '4px',
            fontSize: '14px'
          }}
        />
      );
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
    return (
      <input
        type="text"
        value={filter.value}
        onChange={(e) => handleValueChange(e.target.value)}
        placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ..."
        style={{ 
          width: '100%',
          padding: '10px',
          border: '2px solid #e1e1e1',
          borderRadius: '4px',
          fontSize: '14px'
        }}
      />
    );
  };

  return (
    <div style={{
      display: 'flex',
      alignItems: 'flex-start',
      gap: '15px',
      padding: '20px',
      backgroundColor: 'white',
      borderRadius: '8px',
      border: '2px solid #e1e1e1',
      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
    }}>
      {/* –ù–æ–º–µ—Ä —É—Å–ª–æ–≤–∏—è */}
      <div style={{
        width: '30px',
        height: '30px',
        borderRadius: '50%',
        backgroundColor: '#1890ff',
        color: 'white',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        fontWeight: 'bold',
        fontSize: '14px',
        flexShrink: 0
      }}>
        {index + 1}
      </div>

      {/* –ü–æ–ª–µ */}
      <div style={{ flex: 1 }}>
        <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#333' }}>
          –ü–æ–ª–µ
        </label>
        <select
          value={filter.field || ''}
          onChange={(e) => handleFieldChange(e.target.value)}
          style={{ 
            width: '100%',
            padding: '10px',
            border: '2px solid #e1e1e1',
            borderRadius: '4px',
            fontSize: '14px',
            backgroundColor: filter.field ? '#fff' : '#f9f9f9'
          }}
        >
          <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ --</option>
          {availableFilters.map(availableFilter => (
            <option key={availableFilter.field} value={availableFilter.field}>
              {availableFilter.label || availableFilter.field}
            </option>
          ))}
        </select>
      </div>

      {/* –û–ø–µ—Ä–∞—Ç–æ—Ä */}
      <div style={{ flex: 1 }}>
        <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#333' }}>
          –£—Å–ª–æ–≤–∏–µ
        </label>
        <select
          value={filter.operator || 'equals'}
          onChange={(e) => handleOperatorChange(e.target.value)}
          style={{ 
            width: '100%',
            padding: '10px',
            border: '2px solid #e1e1e1',
            borderRadius: '4px',
            fontSize: '14px',
            backgroundColor: filter.field ? '#fff' : '#f9f9f9'
          }}
          disabled={!filter.field}
        >
          {availableOperators.map(operator => (
            <option key={operator} value={operator}>
              {getOperatorLabel(operator)}
            </option>
          ))}
        </select>
      </div>

      {/* –ó–Ω–∞—á–µ–Ω–∏–µ */}
      <div style={{ flex: 1.5 }}>
        <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#333' }}>
          –ó–Ω–∞—á–µ–Ω–∏–µ
        </label>
        {renderValueInput()}
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
      <div style={{ alignSelf: 'center' }}>
        <button
          onClick={onRemove}
          style={{
            padding: '10px 15px',
            backgroundColor: '#ff4d4f',
            color: 'white',
            border: 'none',
            borderRadius: '6px',
            cursor: 'pointer',
            fontSize: '16px',
            fontWeight: 'bold'
          }}
          title="–£–¥–∞–ª–∏—Ç—å —É—Å–ª–æ–≤–∏–µ"
        >
          ‚úï
        </button>
      </div>
    </div>
  );
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
const getOperatorLabel = (operator) => {
  const operators = {
    'equals': '—Ä–∞–≤–Ω–æ',
    'not_equals': '–Ω–µ —Ä–∞–≤–Ω–æ',
    'contains': '—Å–æ–¥–µ—Ä–∂–∏—Ç',
    'starts_with': '–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å',
    'ends_with': '–∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞',
    'greater_than': '–±–æ–ª—å—à–µ',
    'less_than': '–º–µ–Ω—å—à–µ',
    'between': '–º–µ–∂–¥—É',
    'in': '–≤ —Å–ø–∏—Å–∫–µ',
    'not_in': '–Ω–µ –≤ —Å–ø–∏—Å–∫–µ'
  };
  return operators[operator] || operator;
};

export default FilterCondition;