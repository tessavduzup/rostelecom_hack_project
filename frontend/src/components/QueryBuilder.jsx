import React, { useState } from 'react';

const QueryBuilder = ({ availableFilters, reportTemplates, onExecuteQuery, loading }) => {
  const [selectedFields, setSelectedFields] = useState([]);
  const [filters, setFilters] = useState([]);
  const [selectedTemplate, setSelectedTemplate] = useState('');

  // –£–±—Ä–∞–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ–ª–µ–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —à–∞–±–ª–æ–Ω–∞
  const handleTemplateSelect = (templateId) => {
    console.log('üìã Template selected:', templateId);
    // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –∞–Ω–∞–ª–∏—Ç–∏–∫ —Å–∞–º —Ä–µ—à–∏—Ç –∫–∞–∫–∏–µ –ø–æ–ª—è –≤—ã–±—Ä–∞—Ç—å
    setSelectedTemplate(templateId);
  };

  // –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é —Å–±—Ä–æ—Å–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–µ–π
  const clearFieldSelection = () => {
    setSelectedFields([]);
  };

  // –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π
  const selectAllFields = () => {
    setSelectedFields(availableFilters.map(filter => filter.field));
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
  const addFilter = () => {
    console.log('‚ûï Adding filter');
    const newFilter = {
      id: Date.now(),
      field: '',
      operator: 'equals',
      value: ''
    };
    setFilters(prev => [...prev, newFilter]);
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
  const updateFilter = (filterId, field, value) => {
    console.log('‚úèÔ∏è Updating filter:', filterId, field, value);
    setFilters(prev => 
      prev.map(filter => 
        filter.id === filterId 
          ? { ...filter, [field]: value }
          : filter
      )
    );
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
  const removeFilter = (filterId) => {
    console.log('üóëÔ∏è Removing filter:', filterId);
    setFilters(prev => prev.filter(filter => filter.id !== filterId));
  };

  const executeQuery = () => {
    console.log('üöÄ Executing query');
    
    // –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è - –∞–Ω–∞–ª–∏—Ç–∏–∫ –º–æ–∂–µ—Ç –∑–∞—Ö–æ—Ç–µ—Ç—å –ø—É—Å—Ç–æ–π –æ—Ç—á–µ—Ç
    const query = {
      fields: selectedFields, // –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º
      filters: filters.filter(f => f.field && f.value),
      template: selectedTemplate
    };
    
    console.log('üì§ Sending query:', query);
    onExecuteQuery(query);
  };

  // –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É canExecute - –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
  const canExecute = !loading;

  return (
    <div style={{ padding: '20px', maxWidth: '1200px' }}>
      <h1>üìä –ü–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h1>

      {/* –®–∞–±–ª–æ–Ω—ã - —Ç–µ–ø–µ—Ä—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ */}
      <div style={{ marginBottom: '20px', padding: '15px', border: '1px solid #ddd', borderRadius: '8px' }}>
        <h3>üéØ –®–∞–±–ª–æ–Ω –æ—Ç—á–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</h3>
        <p style={{ fontSize: '14px', color: '#666', marginBottom: '10px' }}>
          –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –Ω–∞–±–æ—Ä –ø–æ–ª–µ–π –Ω–∏–∂–µ
        </p>
        <select 
          value={selectedTemplate || ''}
          onChange={(e) => handleTemplateSelect(e.target.value)}
          style={{ 
            width: '100%', 
            padding: '10px', 
            border: '2px solid #e1e1e1', 
            borderRadius: '6px',
            fontSize: '16px'
          }}
        >
          <option value="">-- –ë–µ–∑ —à–∞–±–ª–æ–Ω–∞ (–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç) --</option>
          {reportTemplates.map((template, index) => (
            <option key={template?.id || index} value={template?.id || ''}>
              {template?.name || `–®–∞–±–ª–æ–Ω ${index + 1}`}
            </option>
          ))}
        </select>
        
        {selectedTemplate && (
          <div style={{ marginTop: '10px', padding: '10px', backgroundColor: '#e6f7ff', borderRadius: '4px' }}>
            <p style={{ margin: 0, fontSize: '14px' }}>
              <strong>–í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω:</strong> {reportTemplates.find(t => t.id === selectedTemplate)?.name}
            </p>
            <p style={{ margin: '5px 0 0 0', fontSize: '12px', color: '#666' }}>
              –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–æ–ª—è: {reportTemplates.find(t => t.id === selectedTemplate)?.fields?.join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
            </p>
          </div>
        )}
      </div>

      {/* –ü–æ–ª—è –¥–ª—è –æ—Ç—á–µ—Ç–∞ - —Ç–µ–ø–µ—Ä—å –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å */}
      <div style={{ marginBottom: '20px', padding: '15px', border: '1px solid #ddd', borderRadius: '8px' }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '15px' }}>
          <h3 style={{ margin: 0 }}>üìã –ü–æ–ª—è –¥–ª—è –æ—Ç—á–µ—Ç–∞</h3>
          <div style={{ display: 'flex', gap: '10px' }}>
            <button 
              onClick={selectAllFields}
              disabled={availableFilters.length === 0}
              style={{
                padding: '8px 16px',
                backgroundColor: availableFilters.length > 0 ? '#1890ff' : '#ccc',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: availableFilters.length > 0 ? 'pointer' : 'not-allowed',
                fontSize: '12px'
              }}
            >
              –í—ã–±—Ä–∞—Ç—å –≤—Å–µ
            </button>
            <button 
              onClick={clearFieldSelection}
              disabled={selectedFields.length === 0}
              style={{
                padding: '8px 16px',
                backgroundColor: selectedFields.length > 0 ? '#ff4d4f' : '#ccc',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: selectedFields.length > 0 ? 'pointer' : 'not-allowed',
                fontSize: '12px'
              }}
            >
              –û—á–∏—Å—Ç–∏—Ç—å
            </button>
          </div>
        </div>

        {availableFilters.length === 0 ? (
          <div style={{ padding: '20px', textAlign: 'center', color: '#666', background: '#f9f9f9', borderRadius: '4px' }}>
            ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –æ—Ç—á–µ—Ç–∞
          </div>
        ) : (
          <>
            <p style={{ fontSize: '14px', color: '#666', marginBottom: '10px' }}>
              –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
            </p>
            <div style={{ 
              display: 'grid', 
              gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))', 
              gap: '10px',
              maxHeight: '300px',
              overflowY: 'auto',
              padding: '10px',
              border: '1px solid #eee',
              borderRadius: '4px'
            }}>
              {availableFilters.map(filter => (
                <label key={filter.field} style={{ 
                  display: 'flex', 
                  alignItems: 'center', 
                  padding: '12px',
                  border: '2px solid #e1e1e1',
                  borderRadius: '6px',
                  cursor: 'pointer',
                  backgroundColor: selectedFields.includes(filter.field) ? '#e6f7ff' : 'white',
                  transition: 'all 0.2s'
                }}>
                  <input
                    type="checkbox"
                    checked={selectedFields.includes(filter.field)}
                    onChange={(e) => {
                      if (e.target.checked) {
                        setSelectedFields(prev => [...prev, filter.field]);
                      } else {
                        setSelectedFields(prev => prev.filter(f => f !== filter.field));
                      }
                    }}
                    style={{ marginRight: '12px', transform: 'scale(1.3)' }}
                  />
                  <div style={{ flex: 1 }}>
                    <div style={{ fontWeight: 'bold', fontSize: '14px' }}>{filter.label || filter.field}</div>
                    <div style={{ fontSize: '12px', color: '#666', marginTop: '4px' }}>
                      –¢–∏–ø: {filter.type} ‚Ä¢ –û–ø–µ—Ä–∞—Ç–æ—Ä—ã: {filter.operators?.join(', ') || '–≤—Å–µ'}
                    </div>
                  </div>
                </label>
              ))}
            </div>
            
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginTop: '10px' }}>
              <div style={{ fontSize: '14px', color: '#666' }}>
                {selectedFields.length > 0 ? (
                  <span style={{ color: 'green' }}>
                    ‚úÖ –í—ã–±—Ä–∞–Ω–æ –ø–æ–ª–µ–π: {selectedFields.length} –∏–∑ {availableFilters.length}
                  </span>
                ) : (
                  <span style={{ color: 'orange' }}>
                    ‚ö†Ô∏è –ü–æ–ª—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã - –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
                  </span>
                )}
              </div>
              <div style={{ fontSize: '12px', color: '#999' }}>
                {availableFilters.length} –ø–æ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ
              </div>
            </div>
          </>
        )}
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div style={{ marginBottom: '20px', padding: '15px', border: '1px solid #ddd', borderRadius: '8px' }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '15px' }}>
          <h3 style={{ margin: 0 }}>üîç –£—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</h3>
          <button 
            onClick={addFilter}
            style={{
              padding: '10px 20px',
              backgroundColor: '#1890ff',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              cursor: 'pointer',
              fontSize: '14px'
            }}
          >
            + –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ
          </button>
        </div>

        {filters.length === 0 ? (
          <div style={{ 
            padding: '40px', 
            textAlign: 'center', 
            color: '#999',
            border: '2px dashed #ddd',
            borderRadius: '8px'
          }}>
            üìù –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
          </div>
        ) : (
          <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>
            {filters.map((filter, index) => (
              <FilterRow
                key={filter.id}
                filter={filter}
                availableFilters={availableFilters}
                onChange={updateFilter}
                onRemove={removeFilter}
                index={index}
              />
            ))}
          </div>
        )}
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
      <button 
        onClick={executeQuery} 
        disabled={!canExecute}
        style={{ 
          width: '100%',
          padding: '15px',
          backgroundColor: canExecute ? '#52c41a' : '#ccc',
          color: 'white',
          border: 'none',
          borderRadius: '8px',
          cursor: canExecute ? 'pointer' : 'not-allowed',
          fontSize: '18px',
          fontWeight: 'bold',
          marginTop: '20px'
        }}
      >
        {loading ? '‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...' : `üöÄ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç`}
      </button>

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
      <div style={{ 
        marginTop: '20px', 
        padding: '15px', 
        backgroundColor: '#e6f7ff', 
        borderRadius: '8px',
        border: '1px solid #91d5ff'
      }}>
        <h4>üí° –ì–∏–±–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:</h4>
        <ul style={{ margin: '10px 0', paddingLeft: '20px' }}>
          <li><strong>–®–∞–±–ª–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</strong> - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–π –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π</li>
          <li><strong>–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –ø–æ–ª—è</strong> - –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—ã–µ –ø–æ–ª—è –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö</li>
          <li><strong>–ì–∏–±–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è</strong> - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ª—é–±—ã–µ —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</li>
          <li><strong>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</strong> - –ø–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω–æ–º –≤–∞–º —Ñ–æ—Ä–º–∞—Ç–µ</li>
        </ul>
        
        <h4>üéØ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</h4>
        <ul style={{ margin: '10px 0', paddingLeft: '20px' }}>
          <li><strong>–ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä</strong>: –ë–µ–∑ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–µ–π ‚Üí –≤—Å–µ –¥–∞–Ω–Ω—ã–µ</li>
          <li><strong>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç</strong>: –¢–æ–ª—å–∫–æ –ø–æ–ª—è –≤—ã—Ä—É—á–∫–∏ –∏ –¥–∞—Ç</li>
          <li><strong>–ê–Ω–∞–ª–∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤</strong>: –ú–µ–Ω–µ–¥–∂–µ—Ä—ã + –ø—Ä–æ–µ–∫—Ç—ã + —Å—Ç–∞–¥–∏–∏</li>
        </ul>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–æ–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞
const FilterRow = ({ filter, availableFilters, onChange, onRemove, index }) => {
  const selectedFilterConfig = availableFilters.find(f => f.field === filter.field);

  return (
    <div style={{
      display: 'flex',
      alignItems: 'center',
      gap: '10px',
      padding: '15px',
      backgroundColor: 'white',
      borderRadius: '8px',
      border: '1px solid #e1e1e1'
    }}>
      <div style={{
        width: '30px',
        height: '30px',
        borderRadius: '50%',
        backgroundColor: '#1890ff',
        color: 'white',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        fontWeight: 'bold',
        fontSize: '14px'
      }}>
        {index + 1}
      </div>

      {/* –ü–æ–ª–µ */}
      <div style={{ flex: 1 }}>
        <select
          value={filter.field || ''}
          onChange={(e) => onChange(filter.id, 'field', e.target.value)}
          style={{ 
            width: '100%',
            padding: '8px',
            border: '1px solid #ddd',
            borderRadius: '4px'
          }}
        >
          <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ --</option>
          {availableFilters.map(avFilter => (
            <option key={avFilter.field} value={avFilter.field}>
              {avFilter.label || avFilter.field}
            </option>
          ))}
        </select>
      </div>

      {/* –û–ø–µ—Ä–∞—Ç–æ—Ä */}
      <div style={{ flex: 1 }}>
        <select
          value={filter.operator || 'equals'}
          onChange={(e) => onChange(filter.id, 'operator', e.target.value)}
          style={{ 
            width: '100%',
            padding: '8px',
            border: '1px solid #ddd',
            borderRadius: '4px'
          }}
          disabled={!filter.field}
        >
          {selectedFilterConfig?.operators?.map(operator => (
            <option key={operator} value={operator}>
              {getOperatorLabel(operator)}
            </option>
          )) || (
            <option value="equals">—Ä–∞–≤–Ω–æ</option>
          )}
        </select>
      </div>

      {/* –ó–Ω–∞—á–µ–Ω–∏–µ */}
      <div style={{ flex: 1.5 }}>
        <ValueInput 
          filter={filter} 
          filterConfig={selectedFilterConfig}
          onChange={(value) => onChange(filter.id, 'value', value)}
        />
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
      <button
        onClick={() => onRemove(filter.id)}
        style={{
          padding: '8px 12px',
          backgroundColor: '#ff4d4f',
          color: 'white',
          border: 'none',
          borderRadius: '4px',
          cursor: 'pointer'
        }}
      >
        ‚úï
      </button>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è
const ValueInput = ({ filter, filterConfig, onChange }) => {
  if (!filter.field) {
    return (
      <input
        type="text"
        placeholder="–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ"
        disabled
        value=""
        style={{ 
          width: '100%',
          padding: '8px',
          border: '1px solid #ddd',
          borderRadius: '4px',
          backgroundColor: '#f5f5f5'
        }}
      />
    );
  }

  const operator = filter.operator || 'equals';

  // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ in/not_in
  if (operator === 'in' || operator === 'not_in') {
    if (filterConfig?.values) {
      return (
        <select
          multiple
          value={filter.value ? filter.value.split(',') : []}
          onChange={(e) => {
            const values = Array.from(e.target.selectedOptions).map(option => option.value);
            onChange(values.join(','));
          }}
          style={{ 
            width: '100%',
            padding: '8px',
            border: '1px solid #ddd',
            borderRadius: '4px',
            minHeight: '80px'
          }}
          size={Math.min(filterConfig.values.length, 4)}
        >
          {filterConfig.values.map(value => (
            <option key={value} value={value}>
              {value}
            </option>
          ))}
        </select>
      );
    }
  }

  // –û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  if (filterConfig?.values) {
    return (
      <select
        value={filter.value || ''}
        onChange={(e) => onChange(e.target.value)}
        style={{ 
          width: '100%',
          padding: '8px',
          border: '1px solid #ddd',
          borderRadius: '4px'
        }}
      >
        <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ --</option>
        {filterConfig.values.map(value => (
          <option key={value} value={value}>
            {value}
          </option>
        ))}
      </select>
    );
  }

  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
  return (
    <input
      type={filterConfig?.type === 'number' ? 'number' : 'text'}
      value={filter.value || ''}
      onChange={(e) => onChange(e.target.value)}
      placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ..."
      style={{ 
        width: '100%',
        padding: '8px',
        border: '1px solid #ddd',
        borderRadius: '4px'
      }}
    />
  );
};

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
const getOperatorLabel = (operator) => {
  const operators = {
    'equals': '—Ä–∞–≤–Ω–æ',
    'not_equals': '–Ω–µ —Ä–∞–≤–Ω–æ',
    'contains': '—Å–æ–¥–µ—Ä–∂–∏—Ç',
    'starts_with': '–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å',
    'ends_with': '–∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞',
    'greater_than': '–±–æ–ª—å—à–µ',
    'less_than': '–º–µ–Ω—å—à–µ',
    'between': '–º–µ–∂–¥—É',
    'in': '–≤ —Å–ø–∏—Å–∫–µ',
    'not_in': '–Ω–µ –≤ —Å–ø–∏—Å–∫–µ'
  };
  return operators[operator] || operator;
};

export default QueryBuilder;