Index: backend/app/db/alembic/versions/d3d60e7bd9ae_added_new_relations.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/app/db/alembic/versions/d3d60e7bd9ae_added_new_relations.py b/backend/app/db/alembic/versions/d3d60e7bd9ae_added_new_relations.py
new file mode 100644
--- /dev/null	(date 1761464787409)
+++ b/backend/app/db/alembic/versions/d3d60e7bd9ae_added_new_relations.py	(date 1761464787409)
@@ -0,0 +1,78 @@
+"""added new relations
+
+Revision ID: d3d60e7bd9ae
+Revises: 3ff3537feeb4
+Create Date: 2025-10-26 10:10:08.885872
+
+"""
+from typing import Sequence, Union
+
+from alembic import op
+import sqlalchemy as sa
+from sqlalchemy.dialects import postgresql
+
+# revision identifiers, used by Alembic.
+revision: str = 'd3d60e7bd9ae'
+down_revision: Union[str, Sequence[str], None] = '3ff3537feeb4'
+branch_labels: Union[str, Sequence[str], None] = None
+depends_on: Union[str, Sequence[str], None] = None
+
+
+def upgrade() -> None:
+    """Upgrade schema."""
+    # ### commands auto generated by Alembic - please adjust! ###
+    op.alter_column('projects', 'evaluation_status_id',
+               existing_type=sa.INTEGER(),
+               nullable=True)
+    op.alter_column('projects', 'industry_manager',
+               existing_type=sa.VARCHAR(length=255),
+               nullable=True)
+    op.alter_column('projects', 'project_number',
+               existing_type=sa.VARCHAR(length=255),
+               nullable=True)
+    op.alter_column('projects', 'deleted_date',
+               existing_type=postgresql.TIMESTAMP(),
+               nullable=True)
+    op.alter_column('projects', 'current_status',
+               existing_type=sa.TEXT(),
+               nullable=True)
+    op.alter_column('projects', 'done_this_period',
+               existing_type=sa.TEXT(),
+               nullable=True)
+    op.alter_column('projects', 'next_period_plans',
+               existing_type=sa.TEXT(),
+               nullable=True)
+    op.create_foreign_key(None, 'projects', 'payment_types', ['payment_type_id'], ['id'])
+    op.create_foreign_key(None, 'projects', 'stages', ['stage_id'], ['id'])
+    op.create_foreign_key(None, 'projects', 'services', ['service_id'], ['id'])
+    # ### end Alembic commands ###
+
+
+def downgrade() -> None:
+    """Downgrade schema."""
+    # ### commands auto generated by Alembic - please adjust! ###
+    op.drop_constraint(None, 'projects', type_='foreignkey')
+    op.drop_constraint(None, 'projects', type_='foreignkey')
+    op.drop_constraint(None, 'projects', type_='foreignkey')
+    op.alter_column('projects', 'next_period_plans',
+               existing_type=sa.TEXT(),
+               nullable=False)
+    op.alter_column('projects', 'done_this_period',
+               existing_type=sa.TEXT(),
+               nullable=False)
+    op.alter_column('projects', 'current_status',
+               existing_type=sa.TEXT(),
+               nullable=False)
+    op.alter_column('projects', 'deleted_date',
+               existing_type=postgresql.TIMESTAMP(),
+               nullable=False)
+    op.alter_column('projects', 'project_number',
+               existing_type=sa.VARCHAR(length=255),
+               nullable=False)
+    op.alter_column('projects', 'industry_manager',
+               existing_type=sa.VARCHAR(length=255),
+               nullable=False)
+    op.alter_column('projects', 'evaluation_status_id',
+               existing_type=sa.INTEGER(),
+               nullable=False)
+    # ### end Alembic commands ###
Index: backend/alembic.ini
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># A generic, single database configuration.\r\n\r\n[alembic]\r\n# path to migration scripts.\r\n# this is typically a path given in POSIX (e.g. forward slashes)\r\n# format, relative to the token %(here)s which refers to the location of this\r\n# ini file\r\nscript_location = %(here)s/alembic\r\n\r\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\r\n# Uncomment the line below if you want the files to be prepended with date and time\r\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\r\n# for all available tokens\r\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\r\n\r\n# sys.path path, will be prepended to sys.path if present.\r\n# defaults to the current working directory.  for multiple paths, the path separator\r\n# is defined by \"path_separator\" below.\r\nprepend_sys_path = .\r\n\r\n\r\n# timezone to use when rendering the date within the migration file\r\n# as well as the filename.\r\n# If specified, requires the tzdata library which can be installed by adding\r\n# `alembic[tz]` to the pip requirements.\r\n# string value is passed to ZoneInfo()\r\n# leave blank for localtime\r\n# timezone =\r\n\r\n# max length of characters to apply to the \"slug\" field\r\n# truncate_slug_length = 40\r\n\r\n# set to 'true' to run the environment during\r\n# the 'revision' command, regardless of autogenerate\r\n# revision_environment = false\r\n\r\n# set to 'true' to allow .pyc and .pyo files without\r\n# a source .py file to be detected as revisions in the\r\n# versions/ directory\r\n# sourceless = false\r\n\r\n# version location specification; This defaults\r\n# to <script_location>/versions.  When using multiple version\r\n# directories, initial revisions must be specified with --version-path.\r\n# The path separator used here should be the separator specified by \"path_separator\"\r\n# below.\r\n# version_locations = %(here)s/bar:%(here)s/bat:%(here)s/alembic/versions\r\n\r\n# path_separator; This indicates what character is used to split lists of file\r\n# paths, including version_locations and prepend_sys_path within configparser\r\n# files such as alembic.ini.\r\n# The default rendered in new alembic.ini files is \"os\", which uses os.pathsep\r\n# to provide os-dependent path splitting.\r\n#\r\n# Note that in order to support legacy alembic.ini files, this default does NOT\r\n# take place if path_separator is not present in alembic.ini.  If this\r\n# option is omitted entirely, fallback logic is as follows:\r\n#\r\n# 1. Parsing of the version_locations option falls back to using the legacy\r\n#    \"version_path_separator\" key, which if absent then falls back to the legacy\r\n#    behavior of splitting on spaces and/or commas.\r\n# 2. Parsing of the prepend_sys_path option falls back to the legacy\r\n#    behavior of splitting on spaces, commas, or colons.\r\n#\r\n# Valid values for path_separator are:\r\n#\r\n# path_separator = :\r\n# path_separator = ;\r\n# path_separator = space\r\n# path_separator = newline\r\n#\r\n# Use os.pathsep. Default configuration used for new projects.\r\npath_separator = os\r\n\r\n# set to 'true' to search source files recursively\r\n# in each \"version_locations\" directory\r\n# new in Alembic version 1.10\r\n# recursive_version_locations = false\r\n\r\n# the output encoding used when revision files\r\n# are written from script.py.mako\r\n# output_encoding = utf-8\r\n\r\n# database URL.  This is consumed by the user-maintained env.py script only.\r\n# other means of configuring database URLs may be customized within the env.py\r\n# file.\r\n#sqlalchemy.url = postgresql+psycopg2://rosteleuser:rostelpassword@localhost:5432/rostelecom_case\r\nsqlalchemy.url = postgresql://postgres:12345@localhost:5432/hackathon_rtk\r\n\r\n\r\n[post_write_hooks]\r\n# post_write_hooks defines scripts or Python functions that are run\r\n# on newly generated revision scripts.  See the documentation for further\r\n# detail and examples\r\n\r\n# format using \"black\" - use the console_scripts runner, against the \"black\" entrypoint\r\n# hooks = black\r\n# black.type = console_scripts\r\n# black.entrypoint = black\r\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\r\n\r\n# lint with attempts to fix using \"ruff\" - use the module runner, against the \"ruff\" module\r\n# hooks = ruff\r\n# ruff.type = module\r\n# ruff.module = ruff\r\n# ruff.options = check --fix REVISION_SCRIPT_FILENAME\r\n\r\n# Alternatively, use the exec runner to execute a binary found on your PATH\r\n# hooks = ruff\r\n# ruff.type = exec\r\n# ruff.executable = ruff\r\n# ruff.options = check --fix REVISION_SCRIPT_FILENAME\r\n\r\n# Logging configuration.  This is also consumed by the user-maintained\r\n# env.py script only.\r\n[loggers]\r\nkeys = root,sqlalchemy,alembic\r\n\r\n[handlers]\r\nkeys = console\r\n\r\n[formatters]\r\nkeys = generic\r\n\r\n[logger_root]\r\nlevel = WARNING\r\nhandlers = console\r\nqualname =\r\n\r\n[logger_sqlalchemy]\r\nlevel = WARNING\r\nhandlers =\r\nqualname = sqlalchemy.engine\r\n\r\n[logger_alembic]\r\nlevel = INFO\r\nhandlers =\r\nqualname = alembic\r\n\r\n[handler_console]\r\nclass = StreamHandler\r\nargs = (sys.stderr,)\r\nlevel = NOTSET\r\nformatter = generic\r\n\r\n[formatter_generic]\r\nformat = %(levelname)-5.5s [%(name)s] %(message)s\r\ndatefmt = %H:%M:%S\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/alembic.ini b/backend/alembic.ini
--- a/backend/alembic.ini	(revision c2f96a269bd7a6dd282b5deeff507a6a93ede6ab)
+++ b/backend/alembic.ini	(date 1761464787387)
@@ -5,7 +5,7 @@
 # this is typically a path given in POSIX (e.g. forward slashes)
 # format, relative to the token %(here)s which refers to the location of this
 # ini file
-script_location = %(here)s/alembic
+script_location = %(here)s/app/db/alembic
 
 # template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
 # Uncomment the line below if you want the files to be prepended with date and time
Index: frontend/src/pages/User.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport ProjectCard from '../components/ProjectList';\r\nimport '../styles/User.css';\r\n\r\nconst User = () => {\r\n  const [projects, setProjects] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Загрузка проектов из базы данных\r\n  useEffect(() => {\r\n    const fetchProjects = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        \r\n        // Здесь реальный запрос к API\r\n        // const response = await fetch('/api/projects');\r\n        // if (!response.ok) throw new Error('Ошибка загрузки');\r\n        // const data = await response.json();\r\n        // setProjects(data);\r\n        \r\n        // Временные mock данные\r\n        setTimeout(() => {\r\n          const mockProjects = [\r\n            {\r\n              id: 1,\r\n              name: 'Цифровизация филиалов',\r\n              status: 'active',\r\n            },\r\n            {\r\n              id: 2,\r\n              name: 'Обновление сетевой инфраструктуры', \r\n              status: 'planning',\r\n            },\r\n            {\r\n              id: 3,\r\n              name: 'Внедрение CRM системы',\r\n              status: 'completed',\r\n            },\r\n            {\r\n              id: 4,\r\n              name: 'Модернизация серверного оборудования',\r\n              status: 'active',\r\n            }\r\n          ];\r\n          setProjects(mockProjects);\r\n          setLoading(false);\r\n        }, 1000);\r\n        \r\n      } catch (err) {\r\n        setError('Не удалось загрузить проекты');\r\n        setLoading(false);\r\n        console.error('Ошибка загрузки:', err);\r\n      }\r\n    };\r\n\r\n    fetchProjects();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <main className=\"user-content\">\r\n        <div className=\"user-container\">\r\n          <div className=\"projects-section\">\r\n            <div className=\"header-with-action\">\r\n              <h1 className=\"page-title\">Мои проекты</h1>\r\n              <Link to=\"/create-project\">\r\n              <button \r\n                className=\"create-project-btn\"\r\n                disabled={loading}\r\n              >\r\n                <span className=\"btn-icon\">+</span>\r\n                Создать новый проект\r\n              </button></Link>\r\n            </div>\r\n            \r\n            {loading && (\r\n              <div className=\"loading-message\">Загрузка проектов...</div>\r\n            )}\r\n            \r\n            {error && (\r\n              <div className=\"error-message\">{error}</div>\r\n            )}\r\n            \r\n            {!loading && !error && (\r\n              <div className=\"projects-list\">\r\n                {projects.length > 0 ? (\r\n                  projects.map(project => (\r\n                    <ProjectCard \r\n                      key={project.id} \r\n                      project={project} \r\n                    />\r\n                  ))\r\n                ) : (\r\n                  <div className=\"empty-state\">\r\n                    <p>У вас пока нет проектов</p>\r\n                    <Link to=\"/create-project\"><button \r\n                      className=\"create-project-btn empty-state-btn\"\r\n                    >\r\n                      <span className=\"btn-icon\">+</span>\r\n                      Создать первый проект\r\n                    </button></Link>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/pages/User.jsx b/frontend/src/pages/User.jsx
--- a/frontend/src/pages/User.jsx	(revision c2f96a269bd7a6dd282b5deeff507a6a93ede6ab)
+++ b/frontend/src/pages/User.jsx	(date 1761464787422)
@@ -63,7 +63,7 @@
     <div className="app-container">
       <main className="user-content">
         <div className="user-container">
-          <div className="projects-section">
+          <div className="projects-section main_container">
             <div className="header-with-action">
               <h1 className="page-title">Мои проекты</h1>
               <Link to="/create-project">
Index: frontend/src/api/authAPI.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import axios from 'axios'\r\n\r\nconst API = axios.create({\r\n    baseURL: 'http://localhost:3001/'\r\n})\r\n\r\nAPI.interceptors.request.use((config) => {\r\n    const token = localStorage.getItem('token')\r\n    if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`\r\n    }\r\n    return config\r\n})\r\n\r\nexport async function loginUser(username, password) {\r\n    try {\r\n        const response = await API.post('/auth/login', { username, password });\r\n        return response.data\r\n    } catch (error) {\r\n        throw new Error(error.response?.data?.message || 'Ошибка авторизации')\r\n    }\r\n}\r\n\r\nexport async function registerUser(userData) {\r\n    try {\r\n        const response = await API.post('/auth/register', userData);\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error(error.response?.data?.message || 'Ошибка регистрации');\r\n    }\r\n}\r\n\r\nexport async function getProjectAttribute() {\r\n    try {\r\n        const response = await API.get('/get-project-attribute', userData)\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error(error.response?.data?.message || 'Ошибка получения атрибутов проекта');\r\n    }\r\n}\r\n\r\nexport async function submitProject(userData) {\r\n    try {\r\n        const response = await API.post('/create-project', userData);\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error(error.response?.data?.message || 'Ошибка отправки проекта')\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/api/authAPI.js b/frontend/src/api/authAPI.js
--- a/frontend/src/api/authAPI.js	(revision c2f96a269bd7a6dd282b5deeff507a6a93ede6ab)
+++ b/frontend/src/api/authAPI.js	(date 1761464787420)
@@ -1,7 +1,7 @@
 import axios from 'axios'
 
 const API = axios.create({
-    baseURL: 'http://localhost:3001/'
+    baseURL: 'http://localhost:8000'
 })
 
 API.interceptors.request.use((config) => {
Index: backend/app/routes/projects.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from datetime import datetime\r\nfrom fastapi import APIRouter, Depends, HTTPException\r\nfrom sqlalchemy.orm import Session, joinedload\r\nfrom ..db.database import get_db\r\nfrom ..models.Stage import Stage\r\nfrom ..models.User import User\r\nfrom ..models.Revenue import Revenue\r\nfrom ..models.Cost import Cost\r\nfrom ..models.Project import Project\r\nfrom ..schemas.project import ProjectShortResponse, ProjectDetailResponse, ProjectUpdate\r\nfrom ..schemas.revenue import RevenueResponse\r\nfrom ..schemas.cost import CostResponse\r\nfrom ..dependencies.auth import get_current_user\r\n\r\nrouter = APIRouter(prefix=\"/projects\", tags=[\"projects\"])\r\n\r\n@router.get(\"/\", response_model=list[ProjectShortResponse])\r\ndef get_my_projects(\r\n        current_user: User = Depends(get_current_user),\r\n        db: Session = Depends(get_db)\r\n):\r\n    # Получаем ФИО текущего пользователя для поиска его проектов\r\n    user_full_name = f\"{current_user.surname} {current_user.name} {current_user.patronymic}\"\r\n\r\n    projects = db.query(Project).options(\r\n        joinedload(Project.stage)\r\n    ).filter(\r\n        Project.manager_name == user_full_name,\r\n        Project.deleted_date.is_(None)\r\n    ).all()\r\n\r\n    # Преобразуем в схему с нужными полями\r\n    result = []\r\n    for project in projects:\r\n        result.append(ProjectShortResponse(\r\n            id=project.id,\r\n            project_name=project.project_name,\r\n            organization_name=project.organization_name,\r\n            stage_name=project.stage.name,\r\n            realisation_probability=project.realisation_probability\r\n        ))\r\n\r\n    return result\r\n\r\n\r\n@router.get(\"/{project_id}\", response_model=ProjectDetailResponse)\r\ndef get_project_details(\r\n        project_id: int,\r\n        current_user: User = Depends(get_current_user),\r\n        db: Session = Depends(get_db)\r\n):\r\n    # Получаем ФИО текущего пользователя\r\n    user_full_name = f\"{current_user.surname} {current_user.name} {current_user.patronymic}\"\r\n\r\n    project = db.query(Project).options(\r\n        joinedload(Project.service),\r\n        joinedload(Project.payment_type),\r\n        joinedload(Project.stage),\r\n        joinedload(Project.business_segment),\r\n        joinedload(Project.evaluation_status)\r\n    ).filter(\r\n        Project.id == project_id,\r\n        Project.manager_name == user_full_name,\r\n        Project.deleted_date.is_(None)\r\n    ).first()\r\n\r\n    if not project:\r\n        raise HTTPException(status_code=404, detail=\"Project not found\")\r\n\r\n    # Преобразуем в детальную схему\r\n    return ProjectDetailResponse(\r\n        id=project.id,\r\n        organization_name=project.organization_name,\r\n        inn=project.inn,\r\n        project_name=project.project_name,\r\n        service_name=project.service.name,\r\n        payment_type_name=project.payment_type.name,\r\n        stage_name=project.stage.name,\r\n        realisation_probability=project.realisation_probability,\r\n        manager_name=project.manager_name,\r\n        business_segment_name=project.business_segment.name,\r\n        implementation_year=project.implementation_year,\r\n        is_industry_solution=project.is_industry_solution,\r\n        is_forecast_accepted=project.is_forecast_accepted,\r\n        is_dzo_implementation=project.is_dzo_implementation,\r\n        is_management_control_required=project.is_management_control_required,\r\n        evaluation_status_name=project.evaluation_status.name if project.evaluation_status else None,\r\n        industry_manager=project.industry_manager,\r\n        project_number=project.project_number,\r\n        current_status=project.current_status,\r\n        done_this_period=project.done_this_period,\r\n        next_period_plans=project.next_period_plans\r\n    )\r\n\r\n\r\n@router.get(\"/{project_id}/revenues\", response_model=list[RevenueResponse])\r\ndef get_project_revenues(\r\n        project_id: int,\r\n        current_user: User = Depends(get_current_user),\r\n        db: Session = Depends(get_db)\r\n):\r\n    # Проверяем что проект принадлежит пользователю\r\n    user_full_name = f\"{current_user.surname} {current_user.name} {current_user.patronymic}\"\r\n    project = db.query(Project).filter(\r\n        Project.id == project_id,\r\n        Project.manager_name == user_full_name\r\n    ).first()\r\n\r\n    if not project:\r\n        raise HTTPException(status_code=404, detail=\"Project not found\")\r\n\r\n    revenues = db.query(Revenue).options(\r\n        joinedload(Revenue.accrual_status)\r\n    ).filter(Revenue.project_id == project_id).all()\r\n\r\n    result = []\r\n    for revenue in revenues:\r\n        result.append(RevenueResponse(\r\n            id=revenue.id,\r\n            year=revenue.year,\r\n            month=revenue.month,\r\n            amount=revenue.amount,\r\n            accrual_status_name=revenue.accrual_status.name\r\n        ))\r\n\r\n    return result\r\n\r\n\r\n@router.get(\"/{project_id}/costs\", response_model=list[CostResponse])\r\ndef get_project_costs(\r\n        project_id: int,\r\n        current_user: User = Depends(get_current_user),\r\n        db: Session = Depends(get_db)\r\n):\r\n    # Проверяем что проект принадлежит пользователю\r\n    user_full_name = f\"{current_user.surname} {current_user.name} {current_user.patronymic}\"\r\n    project = db.query(Project).filter(\r\n        Project.id == project_id,\r\n        Project.manager_name == user_full_name\r\n    ).first()\r\n\r\n    if not project:\r\n        raise HTTPException(status_code=404, detail=\"Project not found\")\r\n\r\n    costs = db.query(Cost).options(\r\n        joinedload(Cost.cost_article),\r\n        joinedload(Cost.cost_type),\r\n        joinedload(Cost.reflection_status)\r\n    ).filter(Cost.project_id == project_id).all()\r\n\r\n    result = []\r\n    for cost in costs:\r\n        result.append(CostResponse(\r\n            id=cost.id,\r\n            year=cost.year,\r\n            month=cost.month,\r\n            amount=cost.amount,\r\n            cost_article_name=cost.cost_article.name,\r\n            cost_type_name=cost.cost_type.name,\r\n            reflection_status_name=cost.reflection_status.name\r\n        ))\r\n\r\n    return result\r\n\r\n\r\n@router.put(\"/{project_id}\", response_model=ProjectDetailResponse)\r\ndef update_project(\r\n        project_id: int,\r\n        project_update: ProjectUpdate,\r\n        current_user: User = Depends(get_current_user),\r\n        db: Session = Depends(get_db)\r\n):\r\n    user_full_name = f\"{current_user.surname} {current_user.name} {current_user.patronymic}\"\r\n\r\n    project = db.query(Project).options(\r\n        joinedload(Project.service),\r\n        joinedload(Project.payment_type),\r\n        joinedload(Project.stage),\r\n        joinedload(Project.business_segment),\r\n        joinedload(Project.evaluation_status)\r\n    ).filter(\r\n        Project.id == project_id,\r\n        Project.manager_name == user_full_name,\r\n        Project.deleted_date.is_(None)\r\n    ).first()\r\n\r\n    if not project:\r\n        raise HTTPException(status_code=404, detail=\"Project not found\")\r\n\r\n    # Обновляем поля\r\n    update_data = project_update.dict(exclude_unset=True)\r\n    for field, value in update_data.items():\r\n        setattr(project, field, value)\r\n\r\n    # Если меняется этап - обновляем вероятность\r\n    if project_update.stage_id:\r\n        stage = db.query(Stage).filter(Stage.id == project_update.stage_id).first()\r\n        if stage:\r\n            project.realisation_probability = stage.probability\r\n\r\n    project.updated_date = datetime.now()\r\n    db.commit()\r\n    db.refresh(project)\r\n\r\n    # Возвращаем обновленный проект\r\n    return ProjectDetailResponse(\r\n        id=project.id,\r\n        organization_name=project.organization_name,\r\n        inn=project.inn,\r\n        project_name=project.project_name,\r\n        service_name=project.service.name,\r\n        payment_type_name=project.payment_type.name,\r\n        stage_name=project.stage.name,\r\n        realisation_probability=project.realisation_probability,\r\n        manager_name=project.manager_name,\r\n        business_segment_name=project.business_segment.name,\r\n        implementation_year=project.implementation_year,\r\n        is_industry_solution=project.is_industry_solution,\r\n        is_forecast_accepted=project.is_forecast_accepted,\r\n        is_dzo_implementation=project.is_dzo_implementation,\r\n        is_management_control_required=project.is_management_control_required,\r\n        evaluation_status_name=project.evaluation_status.name if project.evaluation_status else None,\r\n        industry_manager=project.industry_manager,\r\n        project_number=project.project_number,\r\n        current_status=project.current_status,\r\n        done_this_period=project.done_this_period,\r\n        next_period_plans=project.next_period_plans\r\n    )
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/app/routes/projects.py b/backend/app/routes/projects.py
--- a/backend/app/routes/projects.py	(revision c2f96a269bd7a6dd282b5deeff507a6a93ede6ab)
+++ b/backend/app/routes/projects.py	(date 1761464787420)
@@ -2,11 +2,11 @@
 from fastapi import APIRouter, Depends, HTTPException
 from sqlalchemy.orm import Session, joinedload
 from ..db.database import get_db
-from ..models.Stage import Stage
-from ..models.User import User
-from ..models.Revenue import Revenue
-from ..models.Cost import Cost
-from ..models.Project import Project
+from backend.app.db.models import Stage
+from backend.app.db.models import User
+from backend.app.db.models import Revenue
+from backend.app.db.models import Cost
+from backend.app.db.models import Project
 from ..schemas.project import ProjectShortResponse, ProjectDetailResponse, ProjectUpdate
 from ..schemas.revenue import RevenueResponse
 from ..schemas.cost import CostResponse
Index: backend/app/routes/auth.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from datetime import timedelta\r\nfrom typing import Annotated\r\nfrom fastapi import APIRouter, Depends, HTTPException\r\nfrom fastapi.security import OAuth2PasswordRequestForm\r\nfrom sqlalchemy.orm import Session\r\nfrom ..db.database import get_db\r\nfrom starlette import status\r\nfrom ..models.User import User\r\nfrom ..schemas.user import UserCreate, UserLogin, UserResponse\r\nfrom ..schemas.auth import Token\r\nfrom ..dependencies.auth import get_current_user\r\nfrom backend.app.auth.auth import authenticate_user, ACCESS_TOKEN_EXPIRE_MINUTES, create_access_token, get_password_hash, \\\r\n    verify_password\r\n\r\nrouter = APIRouter(prefix=\"/auth\", tags=[\"authentication\"])\r\n\r\n@router.post(\"/token\")\r\nasync def login_for_access_token(\r\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\r\n    db: Session = Depends(get_db)\r\n) -> Token:\r\n    user = authenticate_user(db, form_data.username, form_data.password)\r\n    if not user:\r\n        raise HTTPException(\r\n            status_code=status.HTTP_401_UNAUTHORIZED,\r\n            detail=\"Incorrect username or password\",\r\n            headers={\"WWW-Authenticate\": \"Bearer\"},\r\n        )\r\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\r\n    access_token = create_access_token(\r\n        data={\"sub\": user.username}, expires_delta=access_token_expires\r\n    )\r\n    return Token(access_token=access_token, token_type=\"bearer\")\r\n\r\n\r\n@router.post(\"/register\", response_model=Token)\r\ndef register(user_data: UserCreate, db: Session = Depends(get_db)):\r\n    existing_user = db.query(User).filter(User.email == user_data.email).first()\r\n    if existing_user:\r\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\r\n\r\n    hashed_password = get_password_hash(user_data.password)\r\n    user = User(\r\n        email=user_data.email,\r\n        hashed_password=hashed_password,\r\n        surname=user_data.surname,\r\n        name=user_data.name,\r\n        patronymic=user_data.patronymic,\r\n        role='manager'  # По умолчанию менеджер\r\n    )\r\n\r\n    db.add(user)\r\n    db.commit()\r\n    db.refresh(user)\r\n\r\n    access_token = create_access_token(data={\"user_id\": user.id})\r\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\r\n\r\n\r\n@router.post(\"/login\", response_model=Token)\r\ndef login(login_data: UserLogin, db: Session = Depends(get_db)):\r\n    user = db.query(User).filter(\r\n        User.email == login_data.email,\r\n        User.deleted_at.is_(None)\r\n    ).first()\r\n\r\n    if not user or not verify_password(login_data.password, user.hashed_password):\r\n        raise HTTPException(status_code=401, detail=\"Invalid credentials\")\r\n\r\n    access_token = create_access_token(data={\"user_id\": user.id})\r\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\r\n\r\n\r\n@router.get(\"/me\", response_model=UserResponse)\r\ndef get_current_user_info(current_user: User = Depends(get_current_user)):\r\n    return current_user
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/app/routes/auth.py b/backend/app/routes/auth.py
--- a/backend/app/routes/auth.py	(revision c2f96a269bd7a6dd282b5deeff507a6a93ede6ab)
+++ b/backend/app/routes/auth.py	(date 1761464787420)
@@ -5,7 +5,7 @@
 from sqlalchemy.orm import Session
 from ..db.database import get_db
 from starlette import status
-from ..models.User import User
+from backend.app.db.models import User
 from ..schemas.user import UserCreate, UserLogin, UserResponse
 from ..schemas.auth import Token
 from ..dependencies.auth import get_current_user
Index: backend/app/dependencies/auth.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from fastapi import Depends, HTTPException\r\nfrom fastapi.security import HTTPBearer\r\nfrom sqlalchemy.orm import Session\r\nfrom ..db.database import get_db\r\nfrom ..models.User import User\r\nfrom backend.app.auth.auth import verify_token\r\n\r\nsecurity = HTTPBearer()\r\n\r\nasync def get_current_user(\r\n    credentials = Depends(security),\r\n    db: Session = Depends(get_db)\r\n) -> type[User]:\r\n    user_id = verify_token(credentials.credentials)\r\n    user = db.query(User).filter(User.id == user_id, User.deleted_at.is_(None)).first()\r\n    if not user:\r\n        raise HTTPException(status_code=401, detail=\"User not found\")\r\n    return user
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/app/dependencies/auth.py b/backend/app/dependencies/auth.py
--- a/backend/app/dependencies/auth.py	(revision c2f96a269bd7a6dd282b5deeff507a6a93ede6ab)
+++ b/backend/app/dependencies/auth.py	(date 1761464787418)
@@ -2,7 +2,7 @@
 from fastapi.security import HTTPBearer
 from sqlalchemy.orm import Session
 from ..db.database import get_db
-from ..models.User import User
+from backend.app.db.models import User
 from backend.app.auth.auth import verify_token
 
 security = HTTPBearer()
Index: backend/app/models/Cost.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/app/models/Cost.py b/backend/app/db/models/Cost.py
rename from backend/app/models/Cost.py
rename to backend/app/db/models/Cost.py
--- a/backend/app/models/Cost.py	(revision c2f96a269bd7a6dd282b5deeff507a6a93ede6ab)
+++ b/backend/app/db/models/Cost.py	(date 1761464787409)
@@ -18,10 +18,10 @@
     amount: Mapped[float] = mapped_column(nullable=False)
 
     # 🔗 Relationships
-    project: Mapped["Project"] = relationship("Project", back_populates="costs")
-    cost_article: Mapped["CostArticle"] = relationship("CostArticle", back_populates="costs")
-    cost_type: Mapped["CostType"] = relationship("CostType", back_populates="costs")
-    reflection_status: Mapped["ReflectionStatus"] = relationship("ReflectionStatus", back_populates="costs")
+    project: Mapped["Project"] = relationship("Project")
+    cost_article: Mapped["CostArticle"] = relationship("CostArticle")
+    cost_type: Mapped["CostType"] = relationship("CostType")
+    reflection_status: Mapped["ReflectionStatus"] = relationship("ReflectionStatus")
 
     def __repr__(self) -> str:
         return (
Index: backend/app/models/Project.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/app/models/Project.py b/backend/app/db/models/Project.py
rename from backend/app/models/Project.py
rename to backend/app/db/models/Project.py
--- a/backend/app/models/Project.py	(revision c2f96a269bd7a6dd282b5deeff507a6a93ede6ab)
+++ b/backend/app/db/models/Project.py	(date 1761464787414)
@@ -44,11 +44,11 @@
     done_this_period: Mapped[Optional[str]] = mapped_column(sqlalchemy.Text())
     next_period_plans: Mapped[Optional[str]] = mapped_column(sqlalchemy.Text())
 
-    service: Mapped["Service"] = relationship("Service", back_populates="projects")
-    payment_type: Mapped["PaymentType"] = relationship("PaymentType", back_populates="projects")
-    stage: Mapped["Stage"] = relationship("Stage", back_populates="projects")
-    business_segment: Mapped["BusinessSegment"] = relationship("BusinessSegment", back_populates="projects")
-    evaluation_status: Mapped[Optional["EvaluationStatus"]] = relationship("EvaluationStatus", back_populates="projects")
+    service: Mapped["Service"] = relationship("Service")
+    payment_type: Mapped["PaymentType"] = relationship("PaymentType")
+    stage: Mapped["Stage"] = relationship("Stage")
+    business_segment: Mapped["BusinessSegment"] = relationship("BusinessSegment")
+    evaluation_status: Mapped[Optional["EvaluationStatus"]] = relationship("EvaluationStatus")
 
     revenues: Mapped[List["Revenue"]] = relationship("Revenue", back_populates="project", cascade="all, delete-orphan")
     costs: Mapped[List["Cost"]] = relationship("Cost", back_populates="project", cascade="all, delete-orphan")
Index: backend/app/models/Revenue.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/app/models/Revenue.py b/backend/app/db/models/Revenue.py
rename from backend/app/models/Revenue.py
rename to backend/app/db/models/Revenue.py
--- a/backend/app/models/Revenue.py	(revision c2f96a269bd7a6dd282b5deeff507a6a93ede6ab)
+++ b/backend/app/db/models/Revenue.py	(date 1761464787416)
@@ -14,8 +14,8 @@
     accrual_status_id: Mapped[int] = mapped_column(ForeignKey("accrual_statuses.id"), nullable=False)
 
     # 🔗 Relationships
-    project: Mapped["Project"] = relationship("Project", back_populates="revenues")
-    accrual_status: Mapped["AccrualStatus"] = relationship("AccrualStatus", back_populates="revenues")
+    project: Mapped["Project"] = relationship("Project")
+    accrual_status: Mapped["AccrualStatus"] = relationship("AccrualStatus")
 
     def __repr__(self) -> str:
         return (
Index: backend/app/models/ProjectHistory.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/app/models/ProjectHistory.py b/backend/app/db/models/ProjectHistory.py
rename from backend/app/models/ProjectHistory.py
rename to backend/app/db/models/ProjectHistory.py
--- a/backend/app/models/ProjectHistory.py	(revision c2f96a269bd7a6dd282b5deeff507a6a93ede6ab)
+++ b/backend/app/db/models/ProjectHistory.py	(date 1761464787414)
@@ -18,8 +18,8 @@
     change_type: Mapped[str] = mapped_column()
 
     # 🔗 Relationships
-    project: Mapped["Project"] = relationship("Project", back_populates="history_records")
-    user: Mapped["User"] = relationship("User", back_populates="project_changes")
+    project: Mapped["Project"] = relationship("Project")
+    user: Mapped["User"] = relationship("User")
 
     def __repr__(self) -> str:
         return (
Index: backend/app/models/User.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/app/models/User.py b/backend/app/db/models/User.py
rename from backend/app/models/User.py
rename to backend/app/db/models/User.py
--- a/backend/app/models/User.py	(revision c2f96a269bd7a6dd282b5deeff507a6a93ede6ab)
+++ b/backend/app/db/models/User.py	(date 1761464787418)
@@ -14,7 +14,7 @@
     name: Mapped[str] = mapped_column(nullable=False)
     patronymic: Mapped[str] = mapped_column(nullable=False)
     created_at: Mapped[datetime] = mapped_column(default=datetime.now)
-    deleted_at: Mapped[datetime] = mapped_column()
+    deleted_at: Mapped[datetime] = mapped_column(default=datetime.now)
 
     # 🔗 Relationship: связь с ProjectHistory
     project_changes: Mapped[list["ProjectHistory"]] = relationship(
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"Black\">\r\n    <option name=\"sdkName\" value=\"Python 3.13 (hackathon-rostelecom)\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.13 (hackathon-rostelecom)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision c2f96a269bd7a6dd282b5deeff507a6a93ede6ab)
+++ b/.idea/misc.xml	(date 1761464787387)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="Black">
-    <option name="sdkName" value="Python 3.13 (hackathon-rostelecom)" />
+    <option name="sdkName" value="Python 3.12" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.13 (hackathon-rostelecom)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: frontend/src/styles/ProjectList.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>.project-plate {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 16px;\r\n  border: 1px solid #e8e8e8;\r\n  border-radius: 8px;\r\n  margin-bottom: 12px;\r\n  background: white;\r\n  transition: box-shadow 0.2s;\r\n}\r\n\r\n.project-plate:hover {\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.project-main-content {\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  gap: 12px;\r\n}\r\n\r\n.project-name-section {\r\n  flex: 1;\r\n}\r\n\r\n.project-name {\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  color: #333;\r\n}\r\n\r\n.project-status-index {\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n  font-weight: 500;\r\n  min-width: 80px;\r\n  text-align: center;\r\n}\r\n\r\n.details-button {\r\n  display: inline-block;\r\n  padding: 8px 16px;\r\n  background-color: #1890ff;\r\n  color: white;\r\n  text-decoration: none;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  transition: background-color 0.2s;\r\n  white-space: nowrap;\r\n}\r\n\r\n.details-button:hover {\r\n  background-color: #40a9ff;\r\n  color: white;\r\n  text-decoration: none;\r\n}\r\n\r\n/* Адаптивность */\r\n@media (max-width: 768px) {\r\n  .project-main-content {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 8px;\r\n  }\r\n  \r\n  .project-status-index {\r\n    align-self: flex-start;\r\n  }\r\n  \r\n  .project-action {\r\n    align-self: flex-end;\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/styles/ProjectList.css b/frontend/src/styles/ProjectList.css
--- a/frontend/src/styles/ProjectList.css	(revision c2f96a269bd7a6dd282b5deeff507a6a93ede6ab)
+++ b/frontend/src/styles/ProjectList.css	(date 1761464787422)
@@ -1,8 +1,8 @@
 .project-plate {
   display: flex;
-  align-items: center;
+  align-items: flex-start; /* Выравнивание по верхнему краю */
   justify-content: space-between;
-  padding: 16px;
+  padding: 16px 20px;
   border: 1px solid #e8e8e8;
   border-radius: 8px;
   margin-bottom: 12px;
@@ -14,64 +14,69 @@
   box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
 }
 
-.project-main-content {
+.project-left-section {
   display: flex;
-  align-items: center;
-  width: 100%;
-  gap: 12px;
-}
-
-.project-name-section {
-  flex: 1;
+  flex-direction: column;
+  align-items: flex-start;
+  gap: 4px; /* Небольшой отступ между названием и статусом */
 }
 
 .project-name {
   font-size: 16px;
   font-weight: 500;
   color: #333;
+  margin: 0;
 }
 
 .project-status-index {
-  padding: 4px 8px;
+  padding: 2px 8px;
   border-radius: 4px;
-  font-size: 12px;
+  font-size: 11px;
   font-weight: 500;
-  min-width: 80px;
   text-align: center;
+  white-space: nowrap;
 }
 
 .details-button {
   display: inline-block;
-  padding: 8px 16px;
-  background-color: #1890ff;
+  padding: 8px 20px;
+  background-color: #7700FF;
   color: white;
   text-decoration: none;
-  border-radius: 4px;
+  border-radius: 6px;
   font-size: 14px;
   font-weight: 500;
   transition: background-color 0.2s;
   white-space: nowrap;
+  margin-top: 2px; /* Чтобы выровнять с названием */
 }
 
-.details-button:hover {
-  background-color: #40a9ff;
-  color: white;
-  text-decoration: none;
+.details-button:hover{
+    transform: translateY(-1px);
+    box-shadow: 0 4px 8px rgba(77, 145, 255, 0.3);
+}
+.details-button:active{
+    transform: translateY(0);
+    box-shadow: 0 2px 4px rgba(77, 139, 255, 0.275);
 }
 
 /* Адаптивность */
 @media (max-width: 768px) {
-  .project-main-content {
-    flex-direction: column;
-    align-items: flex-start;
-    gap: 8px;
+  .project-plate {
+    padding: 12px 16px;
+  }
+  
+  .project-name {
+    font-size: 14px;
   }
   
   .project-status-index {
-    align-self: flex-start;
+    font-size: 10px;
+    padding: 1px 6px;
   }
   
-  .project-action {
-    align-self: flex-end;
+  .details-button {
+    padding: 6px 12px;
+    font-size: 13px;
   }
 }
\ No newline at end of file
Index: frontend/src/components/ProjectList.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../styles/ProjectList.css'\r\n\r\nconst ProjectCard = ({ project }) => {\r\n  const getStatusInfo = (status) => {\r\n    const statusMap = {\r\n      active: { text: 'В работе', color: '#52c41a' },\r\n      planning: { text: 'Планирование', color: '#1890ff' },\r\n      completed: { text: 'Завершен', color: '#fa8c16' },\r\n      rejected: { text: 'Отклонен', color: '#ff4d4f' }\r\n    };\r\n    return statusMap[status] || { text: status, color: '#d9d9d9' };\r\n  };\r\n\r\n  const statusInfo = getStatusInfo(project.status);\r\n\r\n  return (\r\n    <div className=\"project-plate\">\r\n      <div className=\"project-main-content\">\r\n        {/* Название проекта слева */}\r\n        <div className=\"project-name-section\">\r\n          <span className=\"project-name\">{project.name}</span>\r\n        </div>\r\n        \r\n        {/* Нижний индекс в прямоугольнике слева от кнопки */}\r\n        <div \r\n          className=\"project-status-index\"\r\n          style={{ \r\n            backgroundColor: statusInfo.color,\r\n            color: 'white'\r\n          }}\r\n        >\r\n          {statusInfo.text}\r\n        </div>\r\n        \r\n        {/* Кнопка \"Подробнее\" справа */}\r\n        <div className=\"project-action\">\r\n          <Link \r\n            to={`/project/${project.id}`} \r\n            className=\"details-link details-button\"\r\n          >\r\n            Подробнее\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectCard;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/ProjectList.jsx b/frontend/src/components/ProjectList.jsx
--- a/frontend/src/components/ProjectList.jsx	(revision c2f96a269bd7a6dd282b5deeff507a6a93ede6ab)
+++ b/frontend/src/components/ProjectList.jsx	(date 1761464787420)
@@ -1,7 +1,7 @@
 import React from 'react';
 import { Link } from 'react-router-dom';
-import '../styles/ProjectList.css'
-
+import '../styles/ProjectList.css';
+ 
 const ProjectCard = ({ project }) => {
   const getStatusInfo = (status) => {
     const statusMap = {
@@ -17,13 +17,9 @@
 
   return (
     <div className="project-plate">
-      <div className="project-main-content">
-        {/* Название проекта слева */}
-        <div className="project-name-section">
-          <span className="project-name">{project.name}</span>
-        </div>
-        
-        {/* Нижний индекс в прямоугольнике слева от кнопки */}
+      {/* Левая часть: название и статус */}
+      <div className="project-left-section">
+        <div className="project-name">{project.name}</div>
         <div 
           className="project-status-index"
           style={{ 
@@ -33,16 +29,16 @@
         >
           {statusInfo.text}
         </div>
-        
-        {/* Кнопка "Подробнее" справа */}
-        <div className="project-action">
-          <Link 
-            to={`/project/${project.id}`} 
-            className="details-link details-button"
-          >
-            Подробнее
-          </Link>
-        </div>
+      </div>
+      
+      {/* Правая часть: кнопка */}
+      <div className="project-action">
+        <Link 
+          to={`/project/${project.id}`} 
+          className="details-link details-button"
+        >
+          Подробнее
+        </Link>
       </div>
     </div>
   );
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"bb1d5dc5-6b41-4354-a6bd-fb1f57a19407\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/docker-compose.yaml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/backend/app/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/backend/app/main.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/Dockerfile\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/Dockerfile\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n        <option value=\"Dockerfile\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 7\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"34YRugn83W0aJkqGUnZSxlKixxQ\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ModuleVcsDetector.initialDetectionPerformed&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.TerminalTabsStorage.copyFrom.TerminalArrangementManager.252&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/USER/Desktop/хакатон/rostelecom_hack_project/backend/app/routes&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\USER\\Desktop\\хакатон\\rostelecom_hack_project\\backend\\app\\routes\" />\r\n      <recent name=\"C:\\Users\\USER\\Desktop\\хакатон\\rostelecom_hack_project\\backend\\app\" />\r\n      <recent name=\"C:\\Users\\USER\\Desktop\\хакатон\\rostelecom_hack_project\\backend\\app\\schemas\" />\r\n      <recent name=\"C:\\Users\\USER\\Desktop\\хакатон\\rostelecom_hack_project\\backend\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\c1208\\OneDrive\\Desktop\\hackathon-rostelecom\\backend\\app\" />\r\n      <recent name=\"C:\\Users\\c1208\\OneDrive\\Desktop\\hackathon-rostelecom\\backend\\auth\" />\r\n      <recent name=\"C:\\Users\\USER\\Desktop\\хакатон\\rostelecom_hack_project\\backend\\app\\db\" />\r\n      <recent name=\"C:\\Users\\USER\\Desktop\\хакатон\\rostelecom_hack_project\\backend\\app\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-d9fa9deec7cb-d902c0275401-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-252.23892.515\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"bb1d5dc5-6b41-4354-a6bd-fb1f57a19407\" name=\"Changes\" comment=\"\" />\r\n      <created>1761388744887</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1761388744887</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision c2f96a269bd7a6dd282b5deeff507a6a93ede6ab)
+++ b/.idea/workspace.xml	(date 1761464798118)
@@ -5,10 +5,17 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="bb1d5dc5-6b41-4354-a6bd-fb1f57a19407" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/docker-compose.yaml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/backend/Dockerfile" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/frontend/Dockerfile" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/app/dependencies/auth.py" beforeDir="false" afterPath="$PROJECT_DIR$/backend/app/dependencies/auth.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/backend/app/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/backend/app/main.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/Dockerfile" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/Dockerfile" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/app/routes/auth.py" beforeDir="false" afterPath="$PROJECT_DIR$/backend/app/routes/auth.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/app/routes/projects.py" beforeDir="false" afterPath="$PROJECT_DIR$/backend/app/routes/projects.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/auth/Token.py" beforeDir="false" afterPath="$PROJECT_DIR$/backend/app/auth/Token.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/auth/TokenData.py" beforeDir="false" afterPath="$PROJECT_DIR$/backend/app/auth/TokenData.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/auth/__init__.py" beforeDir="false" afterPath="$PROJECT_DIR$/backend/app/auth/__init__.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/auth/auth.py" beforeDir="false" afterPath="$PROJECT_DIR$/backend/app/auth/auth.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -53,7 +60,6 @@
       <recent name="C:\Users\USER\Desktop\хакатон\rostelecom_hack_project\backend" />
     </key>
     <key name="MoveFile.RECENT_KEYS">
-      <recent name="C:\Users\c1208\OneDrive\Desktop\hackathon-rostelecom\backend\app" />
       <recent name="C:\Users\c1208\OneDrive\Desktop\hackathon-rostelecom\backend\auth" />
       <recent name="C:\Users\USER\Desktop\хакатон\rostelecom_hack_project\backend\app\db" />
       <recent name="C:\Users\USER\Desktop\хакатон\rostelecom_hack_project\backend\app" />
Index: backend/app/auth/auth.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from datetime import timedelta, datetime, timezone\r\nimport jwt\r\nfrom fastapi import HTTPException\r\nfrom fastapi.security import OAuth2PasswordBearer\r\nfrom jwt.exceptions import InvalidTokenError\r\nfrom pwdlib import PasswordHash\r\nfrom sqlalchemy.orm import Session\r\nfrom backend.app.models import User\r\n\r\nSECRET_KEY = \"9f861ec94d20895096a9d54b319aa148fcf1b9d3851cbba80dbfa12a05485131\"\r\nALGORITHM = \"HS256\"\r\nACCESS_TOKEN_EXPIRE_MINUTES = 30000\r\npassword_hash = PasswordHash.recommended()\r\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\r\n\r\ndef verify_password(plain_password, hashed_password):\r\n    return password_hash.verify(plain_password, hashed_password)\r\n\r\ndef get_password_hash(password):\r\n    return password_hash.hash(password)\r\n\r\ndef get_user(db: Session, email: str):\r\n    return db.query(User).filter(User.email == email).first()\r\n\r\ndef authenticate_user(db: Session, email: str, password: str):\r\n    user = get_user(db, email)\r\n    if not user:\r\n        return None\r\n    if not verify_password(password, user.hashed_password):\r\n        return None\r\n    return user\r\n\r\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\r\n    to_encode = data.copy()\r\n    if expires_delta:\r\n        expire = datetime.now(timezone.utc) + expires_delta\r\n    else:\r\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\r\n    to_encode.update({\"exp\": expire})\r\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\r\n    return encoded_jwt\r\n\r\ndef verify_token(token: str):\r\n    try:\r\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\r\n        user_id: int = payload.get(\"user_id\")\r\n        if user_id is None:\r\n            raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n        return user_id\r\n    except InvalidTokenError:\r\n        raise HTTPException(status_code=401, detail=\"Invalid token\")
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/app/auth/auth.py b/backend/app/auth/auth.py
--- a/backend/app/auth/auth.py	(revision c2f96a269bd7a6dd282b5deeff507a6a93ede6ab)
+++ b/backend/app/auth/auth.py	(date 1761464787387)
@@ -5,7 +5,7 @@
 from jwt.exceptions import InvalidTokenError
 from pwdlib import PasswordHash
 from sqlalchemy.orm import Session
-from backend.app.models import User
+from backend.app.db.models import User
 
 SECRET_KEY = "9f861ec94d20895096a9d54b319aa148fcf1b9d3851cbba80dbfa12a05485131"
 ALGORITHM = "HS256"
diff --git a/backend/alembic/versions/ac706815d28e_create_costs_table.py b/backend/app/db/alembic/versions/ac706815d28e_create_costs_table.py
rename from backend/alembic/versions/ac706815d28e_create_costs_table.py
rename to backend/app/db/alembic/versions/ac706815d28e_create_costs_table.py
diff --git a/backend/alembic/versions/9c5bd1d784cc_create_projects_table.py b/backend/app/db/alembic/versions/9c5bd1d784cc_create_projects_table.py
rename from backend/alembic/versions/9c5bd1d784cc_create_projects_table.py
rename to backend/app/db/alembic/versions/9c5bd1d784cc_create_projects_table.py
diff --git a/backend/alembic/versions/85f0c297536f_create_stages_table.py b/backend/app/db/alembic/versions/85f0c297536f_create_stages_table.py
rename from backend/alembic/versions/85f0c297536f_create_stages_table.py
rename to backend/app/db/alembic/versions/85f0c297536f_create_stages_table.py
diff --git a/backend/app/db/alembic/versions/__init__.py b/backend/app/db/alembic/versions/__init__.py
new file mode 100644
diff --git a/backend/alembic/versions/febfee914310_create_projects_history_table.py b/backend/app/db/alembic/versions/febfee914310_create_projects_history_table.py
rename from backend/alembic/versions/febfee914310_create_projects_history_table.py
rename to backend/app/db/alembic/versions/febfee914310_create_projects_history_table.py
diff --git a/backend/alembic/versions/f7663b5b0950_create_cost_types_table.py b/backend/app/db/alembic/versions/f7663b5b0950_create_cost_types_table.py
rename from backend/alembic/versions/f7663b5b0950_create_cost_types_table.py
rename to backend/app/db/alembic/versions/f7663b5b0950_create_cost_types_table.py
diff --git a/backend/app/models/Base.py b/backend/app/db/models/Base.py
rename from backend/app/models/Base.py
rename to backend/app/db/models/Base.py
diff --git a/backend/app/models/AccrualStatus.py b/backend/app/db/models/AccrualStatus.py
rename from backend/app/models/AccrualStatus.py
rename to backend/app/db/models/AccrualStatus.py
diff --git a/backend/app/models/CostType.py b/backend/app/db/models/CostType.py
rename from backend/app/models/CostType.py
rename to backend/app/db/models/CostType.py
diff --git a/backend/app/models/CostArticle.py b/backend/app/db/models/CostArticle.py
rename from backend/app/models/CostArticle.py
rename to backend/app/db/models/CostArticle.py
diff --git a/backend/app/models/BusinessSegment.py b/backend/app/db/models/BusinessSegment.py
rename from backend/app/models/BusinessSegment.py
rename to backend/app/db/models/BusinessSegment.py
diff --git a/backend/app/models/PaymentType.py b/backend/app/db/models/PaymentType.py
rename from backend/app/models/PaymentType.py
rename to backend/app/db/models/PaymentType.py
diff --git a/backend/app/models/Indicator.py b/backend/app/db/models/Indicator.py
rename from backend/app/models/Indicator.py
rename to backend/app/db/models/Indicator.py
diff --git a/backend/app/models/EvaluationStatus.py b/backend/app/db/models/EvaluationStatus.py
rename from backend/app/models/EvaluationStatus.py
rename to backend/app/db/models/EvaluationStatus.py
diff --git a/backend/app/models/Service.py b/backend/app/db/models/Service.py
rename from backend/app/models/Service.py
rename to backend/app/db/models/Service.py
diff --git a/backend/app/models/ReflectionStatus.py b/backend/app/db/models/ReflectionStatus.py
rename from backend/app/models/ReflectionStatus.py
rename to backend/app/db/models/ReflectionStatus.py
diff --git a/backend/alembic/env.py b/backend/app/db/alembic/env.py
rename from backend/alembic/env.py
rename to backend/app/db/alembic/env.py
diff --git a/backend/app/models/__init__.py b/backend/app/db/models/__init__.py
rename from backend/app/models/__init__.py
rename to backend/app/db/models/__init__.py
diff --git a/backend/app/models/Stage.py b/backend/app/db/models/Stage.py
rename from backend/app/models/Stage.py
rename to backend/app/db/models/Stage.py
diff --git a/backend/alembic/__init__.py b/backend/app/db/alembic/__init__.py
rename from backend/alembic/__init__.py
rename to backend/app/db/alembic/__init__.py
diff --git a/backend/alembic/versions/39e037ed023b_create_revenues_table.py b/backend/app/db/alembic/versions/39e037ed023b_create_revenues_table.py
rename from backend/alembic/versions/39e037ed023b_create_revenues_table.py
rename to backend/app/db/alembic/versions/39e037ed023b_create_revenues_table.py
diff --git a/backend/alembic/versions/2e1e3e74eb2f_create_reflection_statuses_table.py b/backend/app/db/alembic/versions/2e1e3e74eb2f_create_reflection_statuses_table.py
rename from backend/alembic/versions/2e1e3e74eb2f_create_reflection_statuses_table.py
rename to backend/app/db/alembic/versions/2e1e3e74eb2f_create_reflection_statuses_table.py
diff --git a/backend/alembic/versions/052aa9fbd32e_create_evaluation_statuses_table.py b/backend/app/db/alembic/versions/052aa9fbd32e_create_evaluation_statuses_table.py
rename from backend/alembic/versions/052aa9fbd32e_create_evaluation_statuses_table.py
rename to backend/app/db/alembic/versions/052aa9fbd32e_create_evaluation_statuses_table.py
diff --git a/backend/alembic/versions/01a863ed81a1_create_payment_types_table.py b/backend/app/db/alembic/versions/01a863ed81a1_create_payment_types_table.py
rename from backend/alembic/versions/01a863ed81a1_create_payment_types_table.py
rename to backend/app/db/alembic/versions/01a863ed81a1_create_payment_types_table.py
diff --git a/backend/alembic/versions/65c58db7ae03_create_users_table.py b/backend/app/db/alembic/versions/65c58db7ae03_create_users_table.py
rename from backend/alembic/versions/65c58db7ae03_create_users_table.py
rename to backend/app/db/alembic/versions/65c58db7ae03_create_users_table.py
diff --git a/backend/alembic/versions/514697a4465d_create_cost_articles_table.py b/backend/app/db/alembic/versions/514697a4465d_create_cost_articles_table.py
rename from backend/alembic/versions/514697a4465d_create_cost_articles_table.py
rename to backend/app/db/alembic/versions/514697a4465d_create_cost_articles_table.py
diff --git a/backend/alembic/versions/3ff3537feeb4_init_test.py b/backend/app/db/alembic/versions/3ff3537feeb4_init_test.py
rename from backend/alembic/versions/3ff3537feeb4_init_test.py
rename to backend/app/db/alembic/versions/3ff3537feeb4_init_test.py
diff --git a/backend/alembic/versions/3a264b8656d0_create_indicators_table.py b/backend/app/db/alembic/versions/3a264b8656d0_create_indicators_table.py
rename from backend/alembic/versions/3a264b8656d0_create_indicators_table.py
rename to backend/app/db/alembic/versions/3a264b8656d0_create_indicators_table.py
diff --git a/backend/alembic/versions/845cf800bb97_create_business_segment_table.py b/backend/app/db/alembic/versions/845cf800bb97_create_business_segment_table.py
rename from backend/alembic/versions/845cf800bb97_create_business_segment_table.py
rename to backend/app/db/alembic/versions/845cf800bb97_create_business_segment_table.py
diff --git a/backend/alembic/versions/7b631df83a9f_rebuild_schema.py b/backend/app/db/alembic/versions/7b631df83a9f_rebuild_schema.py
rename from backend/alembic/versions/7b631df83a9f_rebuild_schema.py
rename to backend/app/db/alembic/versions/7b631df83a9f_rebuild_schema.py
diff --git a/backend/alembic/versions/78d2e5460558_create_accural_statuses_table.py b/backend/app/db/alembic/versions/78d2e5460558_create_accural_statuses_table.py
rename from backend/alembic/versions/78d2e5460558_create_accural_statuses_table.py
rename to backend/app/db/alembic/versions/78d2e5460558_create_accural_statuses_table.py
diff --git a/backend/alembic/versions/6b3166ed2fe0_create_services_table.py b/backend/app/db/alembic/versions/6b3166ed2fe0_create_services_table.py
rename from backend/alembic/versions/6b3166ed2fe0_create_services_table.py
rename to backend/app/db/alembic/versions/6b3166ed2fe0_create_services_table.py
