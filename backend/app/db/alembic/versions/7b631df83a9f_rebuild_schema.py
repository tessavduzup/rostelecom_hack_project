"""rebuild schema

Revision ID: 7b631df83a9f
Revises: 65c58db7ae03
Create Date: 2025-10-25 14:56:20.369933

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7b631df83a9f'
down_revision: Union[str, Sequence[str], None] = '65c58db7ae03'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    
    pass


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('payment_types',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('payment_types_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='payment_types_pkey'),
    sa.UniqueConstraint('name', name='payment_types_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('hashed_password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('surname', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('patronymic', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('business_segments',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('business_segments_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='business_segments_pkey'),
    sa.UniqueConstraint('name', name='business_segments_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('cost_types',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('cost_types_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='cost_types_pkey'),
    sa.UniqueConstraint('name', name='cost_types_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('cost_articles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('cost_articles_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='cost_articles_pkey'),
    sa.UniqueConstraint('name', name='cost_articles_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('stages',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('stages_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('probability', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='stages_pkey'),
    sa.UniqueConstraint('name', name='stages_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('costs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('month', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('cost_article_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('cost_type_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reflection_status_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['cost_article_id'], ['cost_articles.id'], name='costs_cost_article_id_fkey'),
    sa.ForeignKeyConstraint(['cost_type_id'], ['cost_types.id'], name='costs_cost_type_id_fkey'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='costs_project_id_fkey'),
    sa.ForeignKeyConstraint(['reflection_status_id'], ['reflection_statuses.id'], name='costs_reflection_status_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='costs_pkey')
    )
    op.create_table('project_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('change_timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('change_field', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('old_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('new_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('change_type', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='project_history_project_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='project_history_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='project_history_pkey')
    )
    op.create_table('accrual_statuses',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('accrual_statuses_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='accrual_statuses_pkey'),
    sa.UniqueConstraint('name', name='accrual_statuses_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('services',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('services_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('service_large_category', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='services_pkey'),
    sa.UniqueConstraint('name', name='services_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('indicators',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='indicators_pkey'),
    sa.UniqueConstraint('name', name='indicators_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('reflection_statuses',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='reflection_statuses_pkey'),
    sa.UniqueConstraint('name', name='reflection_statuses_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('projects',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('projects_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('organization_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('inn', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('project_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('service_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('payment_type_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('stage_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('realisation_probability', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('manager_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('business_segment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('implementation_year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_industry_solution', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('is_forecast_accepted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('is_dzo_implementation', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('is_management_control_required', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('evaluation_status_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('industry_manager', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('project_number', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_date', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_date', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('deleted_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('current_status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('done_this_period', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('next_period_plans', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['business_segment_id'], ['business_segments.id'], name='projects_business_segment_id_fkey'),
    sa.ForeignKeyConstraint(['evaluation_status_id'], ['evaluation_statuses.id'], name='projects_evaluation_status_id_fkey'),
    sa.ForeignKeyConstraint(['payment_type_id'], ['payment_types.id'], name='projects_payment_type_id_fkey'),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], name='projects_service_id_fkey'),
    sa.ForeignKeyConstraint(['stage_id'], ['stages.id'], name='projects_stage_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='projects_pkey'),
    sa.UniqueConstraint('organization_name', name='projects_organization_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('evaluation_statuses',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('evaluation_statuses_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='evaluation_statuses_pkey'),
    sa.UniqueConstraint('name', name='evaluation_statuses_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('revenues',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('month', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('accrual_status_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['accrual_status_id'], ['accrual_statuses.id'], name='revenues_accrual_status_id_fkey'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='revenues_project_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='revenues_pkey')
    )
    # ### end Alembic commands ###
